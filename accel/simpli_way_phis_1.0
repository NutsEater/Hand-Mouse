// I2C device class (I2Cdev) demonstration Arduino sketch for MPU6050 class
// 10/7/2011 by Jeff Rowberg <jeff@rowberg.net>
// Updates should (hopefully) always be available at https://github.com/jrowberg/i2cdevlib
//
// Changelog:
//      2013-05-08 - added multiple output formats
//                 - added seamless Fastwire support
//      2011-10-07 - initial release

/* ============================================
I2Cdev device library code is placed under the MIT license
Copyright (c) 2011 Jeff Rowberg

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
===============================================
*/


#include "I2Cdev.h"
#include "MPU6050.h"

#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
    #include "Wire.h"
#endif

MPU6050 accelgyro;

int16_t ax, ay, az, accx;
int16_t gx, gy, gz;

float AccX, AccY;
float FAccX[2]={0.0, 0.0}, FAccY[2]={0.0, 0.0};
float SpX[2]={0.0, 0.0}, SpY[2]{0.0, 0.0};
float RouteX, RouteY;
int Akol=0, Skol=0;


float varVoltX = 0.3;  // среднее отклонение 
float varProcessX = 0.001; // скорость реакции на изменение 
float PcX = 0.0;
float GX = 0.0;
float PX = 1.0;
float XpX = 0.0;
float ZpX = 0.0;
float XeX = 0.0;


float varVoltY = 0.3;  // среднее отклонение 
float varProcessY = 0.001; // скорость реакции на изменение 
float PcY = 0.0;
float GY = 0.0;
float PY = 1.0;
float XpY = 0.0;
float ZpY = 0.0;
float XeY = 0.0;

#define OUTPUT_READABLE_ACCELGYRO

#define LED_PIN 13
bool blinkState = false;
float IntRect (float a, float b);//интегрирование методам прямоугольников (парамтры - границы интегрирования)

void setup() {
    #if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
        Wire.begin();
    #elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
        Fastwire::setup(400, true);
    #endif

    Serial.begin(38400);

    Serial.println("Initializing I2C devices...");
    accelgyro.initialize();

    // verify connection
    Serial.println("Testing device connections...");
    Serial.println(accelgyro.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");    
    Serial.println("Updating internal sensor offsets...");

    // configure Arduino LED pin for output
    pinMode(LED_PIN, OUTPUT);
}

void loop() {
    

  //delay(1000);
    
    accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);///!!
    
    #ifdef OUTPUT_BINARY_ACCELGYRO
        Serial.write((uint8_t)(ax >> 8)); Serial.write((uint8_t)(ax & 0xFF));
        Serial.write((uint8_t)(ay >> 8)); Serial.write((uint8_t)(ay & 0xFF));
    #endif
    
    AccX=(9.81*(ax)*2.0)/32767.0;
    AccY=(9.81*(ay)*2.0)/32767.0;
    FAccX[1]=KalmanX(AccX);
    FAccY[1]=KalmanY(AccY);
    
     if (Akol==0){//берём показания аксилерометра через n единиц, чтоб отрезок интегртрования был шире
       SpX[1]=AIntRectX(FAccX[0],FAccX[1])*10.0;
       SpY[1]=AIntRectY(FAccY[0],FAccY[1])*10.0;
       Akol=0;
     }
      if (Akol==0){
        FAccX[0]=FAccX[1];
        FAccY[0]=FAccY[1];
      }
      //Akol++;
    RouteX=SIntRectX(SpX[0],SpX[1])*10.0;
    RouteY=SIntRectY(SpY[0],SpY[1])*10.0;
     SpX[0]=SpX[1]; 
     SpY[0]=SpY[1]; 
    
    
    
    Serial.print(SpX[1]); Serial.print("\t");
    Serial.print(SpY[1]); Serial.print("\n");
      
    
    // blink LED to indicate activity
    blinkState = !blinkState;
    digitalWrite(LED_PIN, blinkState);
    delay(10);
}

float KalmanX(float val)
{
  
/*float varVolt = 0.3;  // среднее отклонение 
float varProcess = 0.001; // скорость реакции на изменение 
float Pc = 0.0;
float G = 0.0;
float P = 1.0;
float Xp = 0.0;
float Zp = 0.0;
float Xe = 0.0;*/
  PcX = PX + varProcessX;
  GX = PcX/(PcX + varVoltX);
  PX = (1-GX)*PcX;
  XpX = XeX;
  ZpX = XpX;
  XeX = GX*(val-ZpX)+XpX; // "фильтрованное" значение
  return(XeX);
}
float KalmanY(float val)
{
  
/*float varVolt = 0.3;  // среднее отклонение 
float varProcess = 0.001; // скорость реакции на изменение 
float Pc = 0.0;
float G = 0.0;
float P = 1.0;
float Xp = 0.0;
float Zp = 0.0;
float Xe = 0.0;*/
  PcY = PY + varProcessY;
  GY = PcY/(PcY + varVoltY);
  PY = (1-GY)*PcY;
  XpY = XeY;
  ZpY = XpY;
  XeY = GY*(val-ZpY)+XpY; // "фильтрованное" значение
  return(XeY);
}
//
float AIntRectX (const float a,const float b)//a,b-отрезок интегрирования
{
  float Integral;
  float h=0.009;//h - шаг интегррования 
  float n=(b-a)/h;
  
  for (int16_t i=1;i<=n;i++)
    Integral+=h*sin(a+h*(i-0.5));
  return Integral;
}

float SIntRectX (const float a,const float b)//a,b-отрезок интегрирования
{
  float Integral;
  float h=0.009;//h - шаг интегррования 
  float n=(b-a)/h;
  
  for (int16_t i=1;i<=n;i++)
    Integral+=h*sin(a+h*(i-0.5));
  return Integral;
}

float AIntRectY (const float a,const float b)//a,b-отрезок интегрирования
{
  float Integral;
  float h=0.009;//h - шаг интегррования 
  float n=(b-a)/h;
  
  for (int16_t i=1;i<=n;i++)
    Integral+=h*sin(a+h*(i-0.5));
  return Integral;
}

float SIntRectY (const float a,const float b)//a,b-отрезок интегрирования
{
  float Integral;
  float h=0.009;//h - шаг интегррования 
  float n=(b-a)/h;
  
  for (int16_t i=1;i<=n;i++)
    Integral+=h*sin(a+h*(i-0.5));
  return Integral;
}
